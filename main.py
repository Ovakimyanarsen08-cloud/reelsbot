import os
import asyncio
import logging
from pathlib import Path
from yt_dlp import YoutubeDL
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# –ë–µ—Ä—ë–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (Render Environment Variable)
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –ù–∞ Render –¥–æ–±–∞–≤—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞.")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

VIDEO_DIR = Path("downloads")
VIDEO_DIR.mkdir(exist_ok=True)

ydl_opts = {
    'outtmpl': str(VIDEO_DIR / '%(id)s.%(ext)s'),
    'format': 'mp4',
    'quiet': True,
    'no_warnings': True
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ Instagram Reels –∏–ª–∏ TikTok ‚Äî —è —Å–∫–∞—á–∞—é –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ–±—è."
    )

async def download_video(url: str) -> str | None:
    try:
        with YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            filename = ydl.prepare_filename(info)
        return filename
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
        return None

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text.strip()
    if not url:
        return
    if "instagram.com" not in url and "tiktok.com" not in url:
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É —Å instagram.com –∏–ª–∏ tiktok.com üëç")
        return

    notice = await update.message.reply_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")
    filepath = await asyncio.to_thread(download_video, url)
    if filepath and os.path.exists(filepath):
        with open(filepath, 'rb') as video:
            await update.message.reply_video(video)
        os.remove(filepath)
        await notice.edit_text("‚úÖ –ì–æ—Ç–æ–≤–æ!")
    else:
        await notice.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É.")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()

if __name__ == "__main__":
    main()
